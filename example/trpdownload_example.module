<?php
/**
 * @file
 * Provides some examples showing how module developers could use the
 * Tripal Download API.
 */

/**
 * Implements hook_register_trpdownload_type().
 */
function trpdownload_example_register_trpdownload_type() {
  $types = array();

  // The key is the machine name of my download type.
  $types['feature_csv'] = array(
    // A human readable name to show in an administrative interface one day.
    'type_name' => 'Feature CSV',
    // A human readable description of the format.
    'format' => 'Comma-separated Values',
    // An array of functions that the API will use to customize your experience.
    'functions' => array(
      // The function that tripal jobs will call to generate the file.
      'generate_file' => 'trpdownload_feature_csv_generate_file',
      // OPTIONAL: provide a summary to the user on the download page.
      'summarize' => 'trpdownload_feature_csv_summarize_download',
      // OPTIONAL: determine your own filename.
      'get_filename' => 'trpdownload_feature_csv_get_filename',
      // OPTIONAL: Change the file suffix (defaults to .txt)
      'get_file_suffix' => 'trpdownload_feature_csv_get_suffix',
    ),
  );

  return $types;
}

/**
 * Implements hook_menu().
 */
function trpdownload_example_menu() {
  $items = array();

  $items['chado/feature/csv'] = array(
    'title' => 'Download Features: CSV',
    'page callback' => 'trpdownload_download_page',
    'page arguments' => array('feature_csv', 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Generates a file listing feature in CSV.
 *
 * @param $variables
 *   An associative array of parameters including:
 *     - q: all the query paramters.
 *     - site_safe_name: a sanitized version of your site name for use in variables & filenames.
 *     - type_info: an array of info for the download type.
 *     - suffix: the file format suffix.
 *     - filename: the filename of the file to generate not including path.
 *     - fullpath: the full path where the file should be generated.
 *     - format_name: a human-readable description of the format.
 * @param $job_id
 *   The ID of the tripal job executing this function ;-).
 */
function trpdownload_feature_csv_generate_file($variables, $job_id = NULL) {

  // Create the file and ready it for writting to.
  $filepath = $variables['fullpath'] . $variables['filename'];
  drush_print("File: " . $filepath);
  $FILE = fopen($filepath, 'w') or die ('Uable to create file to write to');


  // Add header to the file.
  fputcsv($FILE, array(
    'Accession',
    'Name',
    'Type',
    'Common Name',
    'Sequence Length',
    'Is Obsolete'
  ));

  // Determine which where criteria to include based on what is in query parameters.
  $where = array();
  $where_args = array();
  // feature.name
  if (isset($variables['q']['name']) AND !empty($variables['q']['name'])) {
    $where[] = "feature.name ~ :name";
    $where_args[':name'] = $variables['q']['name'];
  }
  // feature.uniquename
  if (isset($variables['q']['uniquename']) AND !empty($variables['q']['uniquename'])) {
    $where[] = "feature.uniquename ~ :uniquename";
    $where_args[':uniquename'] = $variables['q']['uniquename'];
  }
  // feature.type_id
  if (isset($variables['q']['type_id']) AND !empty($variables['q']['type_id'])) {
    $where[] = "feature.type_id = :type_id";
    $where_args[':type_id'] = $variables['q']['type_id'];
  }
  // organism.common_name
  if (isset($variables['q']['organism'])
    AND !empty($variables['q']['organism'])
    AND $variables['q']['organism']!= 'All') {
      $where[] = "organism.common_name = :organism";
      $where_args[':organism'] = $variables['q']['organism'];
  }

  // Query copied from the views interface with where arguments determined above.
  $query = "
    SELECT
      feature.uniquename AS feature_uniquename,
      feature.name AS feature_name,
      cvterm.name AS cvterm_name,
      organism.common_name AS organism_common_name,
      feature.seqlen AS feature_seqlen,
      feature.is_obsolete AS feature_is_obsolete
    FROM
      {feature} feature
      LEFT JOIN [chado_feature] chado_feature ON feature.feature_id = chado_feature.feature_id
      LEFT JOIN [node] node_chado_feature ON chado_feature.nid = node_chado_feature.nid
      LEFT JOIN {organism} organism ON feature.organism_id = organism.organism_id
      LEFT JOIN {cvterm} cvterm ON feature.type_id = cvterm.cvterm_id
      WHERE " . implode(' AND ', $where) ."
      ORDER BY organism.common_name ASC, cvterm.name ASC, feature.name ASC";

  // Determine the total number of lines resulting from the query for tracking progress.
  // Since this number can be an estimate, use trpdownload_estimate_rows() which is much
  // faster then count(*). However, we need to keep in mind it can be off by a lot
  // and ensure that the user is never told generate the file is complete before it is.
  $count_query = preg_replace('/SELECT.*FROM/s', 'SELECT count(*) as num_lines FROM', $query);
  $count_query = preg_replace('/ORDER BY .*$/', '', $count_query);
  $total_lines = trpdownload_estimate_rows($count_query, $where_args);
  // If you want to do an EXACT count use the following instead:
  // $total_lines = chado_query($count_query, $where_args)->fetchField();
  drush_print('Estimated Total Lines: '.$total_lines);

  // Execute the original query to get the results.
  $resource = chado_query($query, $where_args);

  // For each db result write a CSV line to the file.
  $cur_line = 0;
  foreach ($resource as $row) {

    // Output the progress.
    $cur_line++;
    $percent = $cur_line/$total_lines * 100;
    // Here we make sure not to tell the use that we are done before we are ($percent != 100)
    // This is needed because we estimated the total number of lines above.
    if ( ($percent%5 == 0) AND ($percent != 100) ) {
      drush_print(round($percent,2).'% Complete.');
      db_query('UPDATE {tripal_jobs} SET progress=:percent WHERE job_id=:id',
        array(':percent' => round($percent), ':id' => $job_id));
    }

    // Don't forget to write the line to the file ;-).
    fputcsv($FILE, (array)$row );
  }

  // Finally, close the file.
  fclose($FILE);

  // This is needed to ensure the user is always told we are done even if the estimated
  // number of lines is greater then what we had.
  db_query('UPDATE {tripal_jobs} SET progress=:percent WHERE job_id=:job_id',
    array(':percent' => 100, ':job_id' => $job_id));
}

/**
 * Customize the filename for the feature_csv download type.
 *
 * @param $vars
 *   An array of variables available to this function. Including:
 *     - ['download_args']['q']: all the arguments in the path passed to the Tripal Download API
 *     - ['download_args']['safe_site_name']: a sanitized version of the site-name for use in filenames
 *     - ['download_args']['type_info']: what you defined in hook_register_trpdownload_type() for the current download type
 * @return
 *   A string representing the filename for a specific download.
 */
function trpdownload_feature_csv_get_filename($vars) {

  $filename = $vars['download_args']['safe_site_name'] .'.sequence_features.' . date('YMj-his');
  return $filename;

}

/**
 * Customize the file suffix for the feature_csv download type.
 *
 * @param $vars
 *   An array of variables available to this function.  Including:
 *     - ['download_args']['q']: all the arguments in the path passed to the Tripal Download API
 *     - ['download_args']['safe_site_name']: a sanitized version of the site-name for use in filenames
 *     - ['download_args']['type_info']: what you defined in hook_register_trpdownload_type() for the current download type
 * @return
 *   A string representing the file suffix for a specific download.
 */
function trpdownload_feature_csv_get_suffix($vars) {
  return 'csv';
}


/**
 * Summarize the current download for Feature CSV download type.
 *
 * @param $vars
 *   An array of variables available to this function. Including:
 *     - ['download_args']['q']: all the arguments in the path passed to the Tripal Download API
 *     - ['download_args']['safe_site_name']: a sanitized version of the site-name for use in filenames
 *     - ['download_args']['type_info']: what you defined in hook_register_trpdownload_type() for the current download type
 * @return
 *   A string representing the summary (can include html).
 */
function trpdownload_feature_csv_summarize_download($vars) {
  $output = ''; // The variable storing the HTML output.

  // First, put the query arguments in a more accessible variable.
  $q = $vars['download_args']['q'];

  $output .= '<span>Sequence features where</span>';
  $output .= '<ul>';

  // Unique Name:
  // Since the operator is exposed we have two variables: uniquename_op has the operator and uniquename has the value.
  // Check the URL of your view after filtering to determine what these variables will be.
  if (!empty($q['uniquename'])) {
    $output .= '<li>Unique Name ' . $q['uniquename_op'] . ' <em>"' . $q['uniquename'] . '"</em></li>';
  }

  // Name: Handle the same as uniquename.
  if (!empty($q['name'])) {
    $output .= '<li>Unique Name ' . $q['name_op'] . ' <em>"' . $q['name'] . '"</em></li>';
  }

  // Feature Type:
  // The type_id is saved in the URL.
  if (!empty($q['type_id']) AND is_int($q['type_id'])) {
     // Since the type_id is not very friendly to the users, look up the name of the type first.
     $name = chado_query('SELECT name FROM {cvterm} WHERE type_id=:id',
       array(':id' => $q['type_id']))->fetchField();
     if ($name) {
       $output .= '<li>Only "'.$name.'"</li>';
     }
  }

  // Organism Common Name:
  // Luckily the full common name is stored in the path.
  if (!empty($q['organism'])) {
    $output .= '<li>From <i>"'.$q['organism'].'"</i></li>';
  }

  $output .= '</ul>';
  return $output;
}
